#include <stdio.h>

in std
implement FileWriter {

	FileWriter(FILE f) {
		this->f = f;
		this->autoFlush = false;
	}

	FileWriter(FILE f, bool autoFlush) {
		this->f = f;
		this->autoFlush = autoFlush;
	}

	void writeln() {
		this->write('\n');
	}

	void write(char c) {
		this->f->write(c);
		if(this->autoFlush) {
			this->f->flush();
		}
	}
	void writeln(char c) {
		this->write(c);
		this->writeln();
	}

	void write(std::String s) {
		size_t length = s->length();
		const char* c_str = s->getCStr();
		for(int i = 0; i < length; ++i) {
			this->write(c_str[i]);
		}
	}
	void writeln(std::String s) {
		this->write(s);
		this->writeln();
	}

	void write(std::Object o) {
		this->write(o->toString());
	}
	void writeln(std::Object o) {
		this->writeln(o->toString());
	}

	void flush() {
		this->f->flush();
	}

	void close() {
		this->f->close();
	}
}

in std
implement FileReader {

	FileReader(FILE f) {
		this->f = f;
	}

	void close() {
		this->f->close();
	}

	u8 read() {
		return (u8) this->f->read();
	}

	bool safe_read(u8* c) {
		while(!this->f->ready());
		*c = this->f->read();
		return true;
	}

	bool read(u8 buffer[], int len) {
		for(int i =0; i < len; ++i) {
			u8 nextByte;
			if(!this->safe_read(&nextByte)) {
				return false;
			}
			buffer[i] = nextByte;
		}
		return true;
	}

	char readChar() {
		if(!this->f->ready()) {
			return (char) 0;
		}
		return this->f->read();
	}

	String readString(int len) {
		char image[len + 1];
		image[len] = '0';
		for(int i =0; i < len; ++i) {
			image[i] = this->readChar();
		}
		return new String(image);
	}

	String readLine() {
		String output = new String();
		bool lineBreakFound = false;
		while(!lineBreakFound) {
			char c = this->readChar();
			if(c == '\n' || c == 0) {
				lineBreakFound = true;
			} else {
				output = output->concat(c);
			}
		}
		return output;
	}

	String readToken() {
		String output = new String();
		bool charFound = false;
		while(!charFound) {
			char c = this->readChar();
			if (!(c == ' ' || c == '\r' || c == '\n' || c == '\t')) {
				charFound = true;
				output = output->concat(c);
			}
		}


		bool whitespaceFound = false;
		while(!whitespaceFound) {
			char c = this->readChar();
			if ((c == ' ' || c == '\r' || c == '\n' || c == '\t')) {
				whitespaceFound = true;
			} else {
				output = output->concat(c);
			}
		}

		return output;
	}


}

in std
implement ContinuousReader {

	ContinuousReader(FILE f) : super(f) {}

	char readChar() {
		while(!this->f->ready());
		return this->f->read();
	}
}
