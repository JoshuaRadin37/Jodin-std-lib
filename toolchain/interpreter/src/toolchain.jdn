#include <system/toolchain.h>
#include <host_hook.h>
#include <host_hook.h>

void print(const char* c) {
	_interpreter_print(c);
}



class InterpreterFile : std::File {
	private u16 fd;
	private std::String path;

	public InterpreterFile(std::String path) {
		this->fd = _open_file(path);
		this->path = path;
	}

	public InterpreterFile(int fd) {
		this->fd = fd;
	}


	virtual public void flush() {
		_flush_file(this->fd);
	}
	virtual public void close() {
		_close_file(this->fd);
	}
	virtual public char read() {
		bool error;
		char output = _read_file(this->fd, &error);
		if(error) {
			PANIC("Error reading from file");
			// panic(new std::String("Error reading from file"));
		}
		return output;
	}

	virtual public bool ready() {
		return _file_ready(this->fd);
	}

	virtual public void write(char c) {

		u16 fd = this->fd;
		if(!_write_file(fd, c)) {
			PANIC(new std::String("Error writing to file"));
		}
	}

};

in std File access_file(std::String file) {
	return new InterpreterFile(file);
}

in std File access_fd(int fd) {
	return new InterpreterFile(fd);
}

in std File access_fd(int fd) {
	return new InterpreterFile(fd);
}