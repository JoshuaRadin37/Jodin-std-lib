#include <system/toolchain.h>
#include <host_hook.h>
#include <host_hook.h>

void print_cstr(const char* c) {
	_interpreter_print(c);
}



class InterpreterFile : std::File {
	private u16 fd;
	private std::String path;

	public InterpreterFile(std::String path, bool read, bool write, bool append) {
		int error = 0;
		this->fd = _open_file(path, &error);
		if (error) {
			exit(-1);
		}
		this->path = path;
	}

	public InterpreterFile(int fd, bool read, bool write, bool append) {
		this->fd = fd;
	}


	virtual public void flush() {
		_flush_file(this->fd);
	}
	virtual public void close() {
		_close_file(this->fd);
	}
	virtual public char read() {
		bool error;
		char output = _read_file(this->fd, &error);
		if(error) {
			PANIC("Error reading from file");
			// panic(new std::String("Error reading from file"));
		}
		return output;
	}

	virtual public bool ready() {
		return _file_ready(this->fd);
	}

	virtual public void write(char c) {

		u16 fd = this->fd;
		if(!_write_file(fd, c)) {
			PANIC(new std::String("Error writing to file"));
		}
	}

	virtual public std::String toString() {
		return this->path;
	}

};

in std File access_file(std::String file, std::String options) {
	bool read = false, write = false, append = false;
	// read = write = append = false;
	int length = options->length();
	const char* cString = options->getCStr();
	if(length == 0) {
		PANIC("Accessing a file must have options");
	}
	for(int i = 0; i < length; ++i) {
		char op = cString[i];
		if(op == 'w') {
			write = true;
		} else if (op == 'r') {
			read = true;
		} else if (op == 'a') {
			append = true;
		} else {
			PANIC(("file option must be a w, r, or a"));
		}
	}

	return new InterpreterFile(file, read, write, append);
}

in std File access_fd(int fd, std::String options) {
	bool read, write, append;
	read = write = append = false;
	int length = options->length();
	const char* cString = options->getCStr();
	if(length == 0) {
		PANIC("Accessing a file must have options");
	}
	for(int i = 0; i < length; ++i) {
		char op = cString[i];
		if(op == 'w') {
			write = true;
		} else if (op == 'r') {
			read = true;
		} else if (op == 'a') {
			append = true;
		} else {
			PANIC(("file option must be a w, r, or a"));
		}
	}

	return new InterpreterFile(fd, read, write, append);
}
